# $Id$
"""
:mod:`MDAnalysis` --- analysis of molecular simulations in python
=================================================================

MDAnalysis is a python framework to analyze molecular dynamics
trajectories generated by Charmm, NAMD, or LAMMPS (Gromacs support is
in the working...).

It allows one to read molecular dynamics trajectories and access the
atomic coordinates through numpy arrays. This provides an extremely
flexible and relatively fast framework for complex analysis tasks. In
addition, Charmm-style atom selection commands are
implemented. Trajectories can also be manipulated (for instance, fit
to a reference structure) and written out. Time-critical code is
written in C for speed.

Code and documentation are hosted at http://code.google.com/p/mdanalysis/

Help is also available through the mailinglist at
http://groups.google.com/group/mdnalysis-discussion

Please report bugs and feature requests through the issue tracker at
http://code.google.com/p/mdanalysis/issues/ 
"""

# Only import often used modules and objects; anything else should be imported
# when needed. In particular, we avoid 
#   import core.rms_fitting
# because it tends to be a show stopper if no LAPACK found; given that many
# people don't need it we rather wait for them to import it and then throw
# a error (TODO: catch that ImportError when no liblapack.so found so that we 
# can issue sensible advice)
__all__ = ['AtomGroup','Selection','Timeseries','distances',
           'Universe', 'collection']

import logging
# see the advice on logging and libraries in
# http://docs.python.org/library/logging.html?#configuring-logging-for-a-library
class NullHandler(logging.Handler):
    def emit(self, record):
        pass
h = NullHandler()
logging.getLogger("MDAnalysis").addHandler(h)
del h

from core import AtomGroup,Selection,Timeseries
from core import distances

# Bring some often used objects into the current namespace
Universe = AtomGroup.Universe
collection = Timeseries.TimeseriesCollection()

