==========================
 Overview over MDAnalysis
==========================

**MDAnalysis** is an object-oriented python toolkit to analyze molecular
dynamics trajectories generated by CHARMM_, NAMD_, LAMMPS_, or Gromacs_.

It allows one to read molecular dynamics trajectories and access the atomic
coordinates through NumPy_ arrays. This provides an extremely flexible and
relatively fast framework for complex analysis tasks. In addition, `CHARMM-style`_
atom :ref:`selection-commands-label` are implemented. Trajectories can also be manipulated
(for instance, fit to a reference structure) and written out.

A typical usage pattern is to iterate through a trajectory and analyze
coordinates for every frame. In the following example the end-to-end distance
of a protein and the radius of gyration of the backbone atoms are calculated::

  import MDAnalysis
  from MDAnalysis.tests.datafiles import PSF,DCD   # test trajectory
  import numpy.linalg
  u = MDAnalysis.Universe(PSF,DCD)                 # always start with a Universe
  nterm = u.s4AKE.N[0]   # can access structure via segid (s4AKE) and atom name
  cterm = u.s4AKE.C[-1]  # ... takes the last atom named 'C'
  bb = u.selectAtoms('protein and backbone')  # a selection (a AtomGroup)
  for ts in u.trajectory:     # iterate through all frames
    r = cterm.pos - nterm.pos # end-to-end vector from atom positions
    d = numpy.linalg.norm(r)  # end-to-end distance
    rgyr = bb.radiusOfGyration()  # method of a AtomGroup; updates with each frame
    print "frame = %d: d = %f Angstroem, Rgyr = %f Angstroem" % (ts.frame, d, rgyr)


.. _NumPy:   http://numpy.scipy.org
.. _CHARMM:  http://www.charmm.org/
.. _LAMMPS:  http://lammps.sandia.gov/
.. _NAMD:    http://www.ks.uiuc.edu/Research/namd/
.. _Gromacs: http://www.gromacs.org/

.. _CHARMM-style: http://www.charmm.org/html/documentation/c34b1/select.html


.. TODO: more about philosophy etc... copy and paste from paper

Using MDAnalysis in python
==========================

If you've installed MDAnalysis in the standard python modules location, load
from within the interpreter::

 from MDAnalysis import *

or ::
 
 import MDAnalysis

The idea behind MDAnalysis is to get trajectory data into NumPy_
:class:`numpy.ndarray` arrays, where it can then be easily manipulated using
all the power in NumPy_ and SciPy_. 

MDAnalysis works well both in scripts and in interactive use. The developers
very much recommend using MDAnalysis from within the IPython_ Python shell.  It
allows one to interactively explore the objects (using TAB-completion and
online help), do analysis and immediately plot results. The examples in this manual
are typically run from an interactive :program:`ipython` session.

Invariably, a MDAnalysis session starts with loading data into the
:class:`MDAnalysis.Universe` class::

 from MDAnalysis import *
 universe = Universe(topology, trajectory)

- The *topology* file lists the atoms and residues (and also their
  connectivity). It can be a CHARMM/XPLOR/NAMD PSF file or a coordinate file
  such as a Protein Databank Brookhaven PDB file, a CHARMM card coordinate file
  (CRD), or a GROMOS/Gromacs GRO file.

- The *trajectory* contains a list of coordinates in the order defined in the
  *topology*. It can either be a single frame (PDB, CRD, and GRO are all read)
  or a time series of coordinate frames such as a CHARMM/NAMD/LAMMPS DCD
  binary file, a Gromacs XTC/TRR trajectory, or a XYZ trajectory (possibly
  compressed with gzip or bzip2).

For the remainder of this introduction we are using a short example trajectory
that is provided with MDAnalysis (as part of the `MDAnalysis test suite`_). The
trajectory is loaded with ::
 
  >>> from MDAnalysis import Universe
  >>> from MDAnalysis.tests.datafiles import PSF,DCD
  >>> u = Universe(PSF, DCD)

(The ``>>>`` signs are the Python input prompt and are not to be typed; they
just make clear in the examples what is input and what is output.)

The :class:`~MDAnalysis.Universe` contains a number of important attributes,
the most important ones of which are :attr:`MDAnalysis.Universe.atoms`::

  >>> print u.atoms
  <AtomGroup with 3341 atoms>

:attr:`~MDAnalysis.Universe.atoms` is a
:class:`~MDAnalysis.core.AtomGroup.AtomGroup` and can be thought of as list
consisting of :class:`~MDAnalysis.core.AtomGroup.Atom` objects. The
:class:`~MDAnalysis.core.AtomGroup.Atom` is the elementary and fundamental
object in MDAnalysis.

The :attr:`MDAnalysis.Universe.trajectory` attribute gives access to the coordinates
over time::

  >>> print u.trajectory
  < DCDReader '/..../MDAnalysis/tests/data/adk_dims.dcd' with 98 frames of 3341 atoms (0 fixed) >

Finally, the :meth:`MDAnalysis.Universe.selectAtoms` method generates a new
:class:`~MDAnalysis.core.AtomGroup.AtomGroup` according to a selection criterion

  >>> calphas = u.selectAtoms("name CA")
  >>> print calphas
  <AtomGroup with 214 atoms>

as described in :ref:`selection-commands-label`.

.. _NumPy: http://numpy.scipy.org/
.. _SciPy: http://www.scipy.org/
.. _IPython: http://ipython.scipy.org/
.. _MDAnalysis test suite: http://code.google.com/p/mdanalysis/wiki/UnitTests
